{"version":3,"file":"TextBot.js","sourceRoot":"","sources":["TextBot.ts"],"names":[],"mappings":";AAiCA,MAAO,EAAE,WAAW,sBAAsB,CAAC,CAAC;AAC5C,MAAO,EAAE,WAAW,0BAA0B,CAAC,CAAC;AAwBhD;IAOI,YAAY,OAAO,GAA6B,EAAE;QAC9C,OAAO,CAAC,IAAI,CAAC,8EAA8E,CAAC,CAAA;QAG5F,IAAI,IAAI,GAA6B,EAAE,CAAC;QACxC,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACV,KAAK,iBAAiB;oBAClB,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;oBAC/C,KAAK,CAAC;gBACV,KAAK,mBAAmB;oBACpB,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;oBACnD,KAAK,CAAC;gBACT,KAAK,qBAAqB;oBACvB,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,mBAAmB,CAAC;oBACvD,KAAK,CAAC;gBACV,KAAK,oBAAoB;oBACrB,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC;oBACrD,KAAK,CAAC;gBACV,KAAK,gBAAgB;oBACjB,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;oBAC7C,KAAK,CAAC;gBAEV,KAAK,WAAW,CAAC;gBACjB,KAAK,cAAc;oBACf,OAAO,CAAC,KAAK,CAAC,+GAA+G,CAAC,CAAC;oBAC/H,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;YACtE,CAAC;QACL,CAAC;QAGD,IAAI,CAAC,SAAS,GAAG,IAAI,EAAE,CAAC,gBAAgB,EAAE,CAAC;QAC3C,IAAI,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IACzD,CAAC;IAEM,EAAE,CAAC,KAAa,EAAE,QAAkB;QACvC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAC7B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,GAAG,CAAC,EAAU,EAAE,MAAmF;QACtG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,SAAS,CAAC,OAAiC;QAC9C,OAAO,CAAC,KAAK,CAAC,uJAAuJ,CAAC,CAAC;QACvK,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;IACnE,CAAC;IAEM,WAAW;QACd,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;IACnC,CAAC;IAEM,WAAW,CAAC,OAAY,EAAE,QAAgB,EAAE,UAAgB;QAC/D,OAAO,CAAC,KAAK,CAAC,wKAAwK,CAAC,CAAC;QACxL,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;IACrE,CAAC;IAEM,cAAc,CAAC,OAAiB,EAAE,QAAgD;QACrF,OAAO,CAAC,KAAK,CAAC,yJAAyJ,CAAC,CAAC;QACzK,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;IACxE,CAAC;AACL,CAAC;AAtEY,eAAO,UAsEnB,CAAA","sourcesContent":["//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license.\n//\n// Microsoft Bot Framework: http://botframework.com\n//\n// Bot Builder SDK Github:\n// https://github.com/Microsoft/BotBuilder\n//\n// Copyright (c) Microsoft Corporation\n// All rights reserved.\n//\n// MIT License:\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport ub = require('../bots/UniversalBot');\nimport cc = require('../bots/ConsoleConnector');\nimport dlg = require('../dialogs/Dialog');\nimport actions = require('../dialogs/DialogAction');\n\nexport interface IConsoleConnectorOptions {\n    appId?: string;\n    appSecret?: string;\n    localizer?: ILocalizer;\n    minSendDelay?: number;\n    defaultDialogId?: string;\n    defaultDialogArgs?: any;\n    groupWelcomeMessage?: string;\n    userWelcomeMessage?: string;\n    goodbyeMessage?: string;\n\n    // Ignored\n    endpoint?: string;\n    defaultFrom?: any;\n\n    // Unsupported options\n    userStore?: any;\n    sessionStore?: any;\n}\n\nexport class TextBot  {\n    private connector: cc.ConsoleConnector;\n    private bot: ub.UniversalBot;\n    private groupWelcomeMessage: string;\n    private userWelcomeMessage: string;\n    private goodbyeMessage: string;\n\n    constructor(options: IConsoleConnectorOptions = {}) {\n        console.warn('TextBot class is deprecated. Use UniversalBot with a ConsoleConnector class.')\n\n        // Map options into settings\n        var oBot: ub.IUniversalBotSettings = {};\n        for (var key in options) {\n            switch (key) {\n                case 'defaultDialogId':\n                    oBot.defaultDialogId = options.defaultDialogId;\n                    break;\n                case 'defaultDialogArgs':\n                    oBot.defaultDialogArgs = options.defaultDialogArgs;\n                    break;\n                 case 'groupWelcomeMessage':\n                    this.groupWelcomeMessage = options.groupWelcomeMessage;\n                    break;\n                case 'userWelcomeMessage':\n                    this.userWelcomeMessage = options.userWelcomeMessage;\n                    break;\n                case 'goodbyeMessage':\n                    this.goodbyeMessage = options.goodbyeMessage;\n                    break;\n                \n                case 'userStore':\n                case 'sessionStore':\n                    console.error('TextBot custom stores no longer supported. Use UniversalBot with a custom IBotStorage implementation instead.');\n                    throw new Error('TextBot custom stores no longer supported.');\n            }\n        }\n\n        // Initialize connector & universal bot\n        this.connector = new cc.ConsoleConnector();\n        this.bot = new ub.UniversalBot(this.connector, oBot);\n    }\n\n    public on(event: string, listener: Function): this {\n        this.bot.on(event, listener);\n        return this;\n    }\n\n    public add(id: string, dialog?: dlg.Dialog | actions.IDialogWaterfallStep[] | actions.IDialogWaterfallStep): this {\n        this.bot.dialog(id, dialog); \n        return this;\n    }\n\n    public configure(options: IConsoleConnectorOptions) {\n        console.error(\"TextBot.configure() is no longer supported. You should either pass all options into the constructor or update code to use the new UniversalBot class.\");\n        throw new Error(\"TextBot.configure() is no longer supported.\");\n    }\n\n    public listenStdin(): any {\n        return this.connector.listen();\n    }\n\n    public beginDialog(address: any, dialogId: string, dialogArgs?: any): void {\n        console.error(\"TextBot.beginDialog() is no longer supported. The schema for sending proactive messages has changed and you should update your code to use the new UniversalBot class.\");\n        throw new Error(\"TextBot.beginDialog() is no longer supported.\");\n    }\n\n    public processMessage(message: IMessage, callback?: (err: Error, reply: IMessage) => void): void {\n        console.error(\"TextBot.processMessage() is no longer supported. The schema for messages has changed and you should update your code to use the new UniversalBot class.\");\n        throw new Error(\"TextBot.processMessage() is no longer supported.\");\n    }\n}\n"]}