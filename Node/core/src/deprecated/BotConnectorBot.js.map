{"version":3,"file":"BotConnectorBot.js","sourceRoot":"","sources":["BotConnectorBot.ts"],"names":[],"mappings":";AAiCA,MAAO,EAAE,WAAW,sBAAsB,CAAC,CAAC;AAC5C,MAAO,IAAI,WAAW,uBAAuB,CAAC,CAAC;AA0B/C;IAOI,YAAY,OAA6B;QACrC,OAAO,CAAC,IAAI,CAAC,mFAAmF,CAAC,CAAA;QAGjG,IAAI,UAAU,GAAgC,EAAE,CAAC;QACjD,IAAI,IAAI,GAA6B,EAAE,CAAC;QACxC,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACV,KAAK,OAAO;oBACR,UAAU,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;oBACjC,KAAK,CAAC;gBACV,KAAK,WAAW;oBACZ,UAAU,CAAC,WAAW,GAAG,OAAO,CAAC,SAAS,CAAC;oBAC3C,KAAK,CAAC;gBACV,KAAK,iBAAiB;oBAClB,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;oBAC/C,KAAK,CAAC;gBACV,KAAK,mBAAmB;oBACpB,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;oBACnD,KAAK,CAAC;gBACT,KAAK,qBAAqB;oBACvB,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,mBAAmB,CAAC;oBACvD,KAAK,CAAC;gBACV,KAAK,oBAAoB;oBACrB,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC;oBACrD,KAAK,CAAC;gBACV,KAAK,gBAAgB;oBACjB,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;oBAC7C,KAAK,CAAC;gBAEV,KAAK,WAAW,CAAC;gBACjB,KAAK,mBAAmB,CAAC;gBACzB,KAAK,4BAA4B;oBAC7B,OAAO,CAAC,KAAK,CAAC,uHAAuH,CAAC,CAAC;oBACvI,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;YAC9E,CAAC;QACL,CAAC;QAGD,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACpD,IAAI,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IACzD,CAAC;IAEM,EAAE,CAAC,KAAa,EAAE,QAAkB;QACvC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAC7B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,GAAG,CAAC,EAAU,EAAE,MAAmF;QACtG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,SAAS,CAAC,OAA6B;QAC1C,OAAO,CAAC,KAAK,CAAC,+JAA+J,CAAC,CAAC;QAC/K,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;IAC3E,CAAC;IAEM,kBAAkB,CAAC,OAA8B;QACpD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACV,OAAO,CAAC,KAAK,CAAC,6LAA6L,CAAC,CAAC;YAC7M,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;QACzG,CAAC;QACD,MAAM,CAAC,CAAC,GAAQ,EAAE,GAAQ,EAAE,IAAc,KAAK,IAAI,EAAE,CAAC;IAC1D,CAAC;IAEM,MAAM,CAAC,QAAiB,EAAE,UAAgB;QAC7C,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACX,OAAO,CAAC,KAAK,CAAC,kMAAkM,CAAC,CAAC;YAClN,MAAM,IAAI,KAAK,CAAC,iFAAiF,CAAC,CAAC;QACvG,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;IACnC,CAAC;IAEM,WAAW,CAAC,OAAY,EAAE,QAAgB,EAAE,UAAgB;QAC/D,OAAO,CAAC,KAAK,CAAC,gLAAgL,CAAC,CAAC;QAChM,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;IAC7E,CAAC;AACL,CAAC;AArFY,uBAAe,kBAqF3B,CAAA","sourcesContent":["//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license.\n//\n// Microsoft Bot Framework: http://botframework.com\n//\n// Bot Builder SDK Github:\n// https://github.com/Microsoft/BotBuilder\n//\n// Copyright (c) Microsoft Corporation\n// All rights reserved.\n//\n// MIT License:\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport ub = require('../bots/UniversalBot');\nimport chat = require('../bots/ChatConnector');\nimport dlg = require('../dialogs/Dialog');\nimport actions = require('../dialogs/DialogAction');\n\nexport interface IBotConnectorOptions {\n    botId: string;\n    appId?: string;\n    appSecret?: string;\n    localizer?: ILocalizer;\n    minSendDelay?: number;\n    defaultDialogId?: string;\n    defaultDialogArgs?: any;\n    groupWelcomeMessage?: string;\n    userWelcomeMessage?: string;\n    goodbyeMessage?: string;\n\n    // Ignored\n    endpoint?: string;\n    defaultFrom?: any;\n\n    // Unsupported options\n    userStore?: any;\n    conversationStore?: any;\n    perUserInConversationStore?: any;\n}\n\nexport class BotConnectorBot  {\n    private connector: chat.ChatConnector;\n    private bot: ub.UniversalBot;\n    private groupWelcomeMessage: string;\n    private userWelcomeMessage: string;\n    private goodbyeMessage: string;\n\n    constructor(options: IBotConnectorOptions) {\n        console.warn('BotConnectorBot class is deprecated. Use UniversalBot with a ChatConnector class.')\n\n        // Map options into settings\n        var oConnector: chat.IChatConnectorSettings = {};\n        var oBot: ub.IUniversalBotSettings = {};\n        for (var key in options) {\n            switch (key) {\n                case 'appId':\n                    oConnector.appId = options.appId;\n                    break;\n                case 'appSecret':\n                    oConnector.appPassword = options.appSecret;\n                    break;\n                case 'defaultDialogId':\n                    oBot.defaultDialogId = options.defaultDialogId;\n                    break;\n                case 'defaultDialogArgs':\n                    oBot.defaultDialogArgs = options.defaultDialogArgs;\n                    break;\n                 case 'groupWelcomeMessage':\n                    this.groupWelcomeMessage = options.groupWelcomeMessage;\n                    break;\n                case 'userWelcomeMessage':\n                    this.userWelcomeMessage = options.userWelcomeMessage;\n                    break;\n                case 'goodbyeMessage':\n                    this.goodbyeMessage = options.goodbyeMessage;\n                    break;\n                \n                case 'userStore':\n                case 'conversationStore':\n                case 'perUserInConversationStore':\n                    console.error('BotConnectorBot custom stores no longer supported. Use UniversalBot with a custom IBotStorage implementation instead.');\n                    throw new Error('BotConnectorBot custom stores no longer supported.');\n            }\n        }\n\n        // Initialize connector & universal bot\n        this.connector = new chat.ChatConnector(oConnector);\n        this.bot = new ub.UniversalBot(this.connector, oBot);\n    }\n\n    public on(event: string, listener: Function): this {\n        this.bot.on(event, listener);\n        return this;\n    }\n\n    public add(id: string, dialog?: dlg.Dialog | actions.IDialogWaterfallStep[] | actions.IDialogWaterfallStep): this {\n        this.bot.dialog(id, dialog); \n        return this;\n    }\n\n    public configure(options: IBotConnectorOptions) {\n        console.error(\"BotConnectorBot.configure() is no longer supported. You should either pass all options into the constructor or update code to use the new UniversalBot class.\");\n        throw new Error(\"BotConnectorBot.configure() is no longer supported.\");\n    }\n\n    public verifyBotFramework(options?: IBotConnectorOptions): any {\n        if (options) {\n            console.error(\"Calling BotConnectorBot.verifyBotFramework() with options is no longer supported. You should either pass all options into the constructor or update code to use the new UniversalBot class.\");\n            throw new Error(\"Calling BotConnectorBot.verifyBotFramework() with options is no longer supported.\");\n        }\n        return (req: any, res: any, next: Function) => next();\n    }\n\n    public listen(dialogId?: string, dialogArgs?: any): any {\n        if (dialogId) {\n            console.error(\"Calling BotConnectorBot.listen() with a custom dialogId is no longer supported. You should either pass as defaultDialogId into the constructor or update code to use the new UniversalBot class.\");\n            throw new Error(\"Calling BotConnectorBot.listen() with a custom dialogId is no longer supported.\");\n        }\n        return this.connector.listen();\n    }\n\n    public beginDialog(address: any, dialogId: string, dialogArgs?: any): void {\n        console.error(\"BotConnectorBot.beginDialog() is no longer supported. The schema for sending proactive messages has changed and you should update your code to use the new UniversalBot class.\");\n        throw new Error(\"BotConnectorBot.beginDialog() is no longer supported.\");\n    }\n}\n"]}