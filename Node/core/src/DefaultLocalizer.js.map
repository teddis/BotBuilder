{"version":3,"file":"DefaultLocalizer.js","sourceRoot":"","sources":["DefaultLocalizer.ts"],"names":[],"mappings":"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","sourcesContent":["// \n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license.\n// \n// Microsoft Bot Framework: http://botframework.com\n// \n// Bot Builder SDK Github:\n// https://github.com/Microsoft/BotBuilder\n// \n// Copyright (c) Microsoft Corporation\n// All rights reserved.\n// \n// MIT License:\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport fs = require('fs');\nimport async = require('async');\nimport Promise = require('promise');\nimport path = require('path');\nimport logger = require('./logger');\nimport lib = require('./bots/Library');\n\nexport class DefaultLocalizer implements ILocalizer {\n    private _defaultLocale: string;\n    private localePaths = <string[]>[];\n    private locales: { [locale:string]: ILocaleEntry; } = {}\n\n    constructor(root: lib.Library, defaultLocale: string) {\n        this.defaultLocale(defaultLocale || 'en');\n\n        // Find all of the searchable \n        var libsSeen = <any>{};\n        var _that = this;\n        function addPaths(library: lib.Library) {\n            // Protect against circular references.\n            if (!libsSeen.hasOwnProperty(library.name)) {\n                libsSeen[library.name] = true;\n\n                // Add paths for child libraries\n                library.forEachLibrary((child) => {\n                    addPaths(child);\n                });\n\n                // Add libraries '/locale/' folder to list of known paths.\n                // - Order is important here. We want the bots root path to be last so that any\n                //   overrides for the bot will be applied last.\n                var path = library.localePath();\n                if (path) {\n                    _that.localePaths.push(path);\n                }\n            }\n        }        \n        addPaths(root);\n    }\n\n    public defaultLocale(locale?: string): string {\n        if (locale) {\n            this._defaultLocale = locale.toLowerCase();\n        } else {\n            return this._defaultLocale;\n        }\n    }\n\n    public load(locale: string, done?: ErrorCallback): void {\n        logger.debug(\"localizer.load(%s)\", locale);                                               \n\n        // Build list of locales to load\n        locale = locale ? locale.toLowerCase() : this._defaultLocale;\n        var fbDefault = this.getFallback(this._defaultLocale);\n        var fbLocale = this.getFallback(locale);\n        var locales = ['en'];\n        if (fbDefault !== 'en') {\n            locales.push(fbDefault);\n        }\n        if (this._defaultLocale !== fbDefault) {\n            locales.push(this._defaultLocale);\n        }\n        if (fbLocale !== fbDefault) {\n            locales.push(fbLocale);\n        }\n        if (locale !== fbLocale) {\n            locales.push(locale);\n        }\n\n        // Load locales in parallel\n        async.each(locales, (locale, cb) => {\n            this.loadLocale(locale).done(() => cb(), (err) => cb(err));\n        }, (err) => {\n            if (done) {\n                done(err);\n            }    \n        });\n    }\n\n    public trygettext(locale: string, msgid: string, ns: string): string {\n        // Calculate fallbacks\n        locale = locale ? locale.toLowerCase() : this._defaultLocale;\n        var fbDefault = this.getFallback(this._defaultLocale);\n        var fbLocale = this.getFallback(locale);\n\n        // Calculate namespaced key\n        ns = ns ? ns.toLocaleLowerCase() : null;\n        var key = this.createKey(ns, msgid);\n\n        // Lookup entry\n        var text = this.getEntry(locale, key);\n        if (!text && fbLocale !== locale) {\n            text = this.getEntry(fbLocale, key);\n        }\n        if (!text && this._defaultLocale !== locale) {\n            text = this.getEntry(this._defaultLocale, key);\n        }\n        if (!text && fbDefault !== this._defaultLocale) {\n            text = this.getEntry(fbDefault, key);\n        }\n\n        // Return localized message\n        return text ? this.getValue(text) : null;\n    }\n\n    public gettext(locale: string, msgid: string, ns: string): string {\n        return this.trygettext(locale, msgid, ns) || msgid;\n    } \n\n    public ngettext(locale: string, msgid: string, msgid_plural: string, count: number, ns: string): string {\n        return count == 1 ? this.gettext(locale, msgid, ns) : this.gettext(locale, msgid_plural, ns);\n    }   \n\n    private getFallback(locale?: string): string {\n        if (locale) {\n            var split = locale.indexOf(\"-\");\n            if (split != -1) {\n                return locale.substring(0, split);\n            }\n        }\n        return this.defaultLocale();\n    }\n    private loadLocale(locale: string): Promise.IThenable<boolean> {\n        // Load local on first access\n        if (!this.locales.hasOwnProperty(locale)) {\n            var entry: ILocaleEntry;\n            this.locales[locale] = entry = { loaded: null, entries: {} };\n            entry.loaded = new Promise((resolve, reject) => {\n                // Load locale in all file paths\n                async.eachSeries(this.localePaths, (path, cb) => {\n                    this.loadLocalePath(locale, path).done(() => cb(), (err) => cb(err));\n                }, (err) => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(true);\n                    }\n                });\n            });\n        } \n        return this.locales[locale].loaded;\n    }\n\n    private loadLocalePath(locale: string, localePath: string): Promise.IThenable<number> {\n        var dir = path.join(localePath, locale);\n        var entryCount = 0;\n        var p = new Promise<number>((resolve, reject) => {\n            var access = Promise.denodeify(fs.access);\n            var readdir = Promise.denodeify(fs.readdir);\n            var asyncEach = Promise.denodeify(async.each);\n            access(dir)\n                .then(() =>{\n                    // Directory exists\n                    return readdir(dir);\n                })\n                .then((files: string[]) => {\n                    // List of files retreived\n                    return asyncEach(files, (file: string, cb: ErrorCallback) => {\n                        if (file.substring(file.length - 5).toLowerCase() == \".json\") {\n                            logger.debug(\"localizer.load(%s) - Loading %s/%s\", locale, dir, file);\n                            this.parseFile(locale, dir, file)\n                                .then((count) => {\n                                    entryCount += count;\n                                    cb();\n                                }, (err) => {\n                                    logger.error(\"localizer.load(%s) - Error reading %s/%s: %s\", locale, dir, file, err.toString());\n                                    cb();\n                                }); \n                        } else {\n                            cb();\n                        }\n                    });\n                })\n                .then(() => {\n                    // Files successfully added\n                    resolve(entryCount);\n                }, (err) => {\n                    if (err.code === 'ENOENT') {\n                        // No local directory\n                        logger.debug(\"localizer.load(%s) - Couldn't find directory: %s\", locale, dir);                                \n                        resolve(-1);\n                    } else {\n                        logger.error('localizer.load(%s) - Error: %s', locale, err.toString());\n                        reject(err);\n                    }                        \n                });\n        });\n        return p;\n    }\n\n    private parseFile(locale: string, localeDir: string, filename: string): Promise.IThenable<number> {\n        var table = this.locales[locale];\n        return new Promise<number>((resolve, reject) => {\n            var filePath = path.join(localeDir, filename);\n            var readFile = Promise.denodeify(fs.readFile);\n            readFile(filePath, 'utf8')\n                .then((data) => {\n                    // Find namespace \n                    var ns = path.parse(filename).name;\n                    if (ns == 'index') {\n                        ns = null;\n                    }\n\n                    // Add entries to map\n                    try {\n                        // Parse locale file and add entries to table\n                        var cnt = 0;\n                        var entries = JSON.parse(data);\n                        for (var key in entries) {\n                            var k = this.createKey(ns, key);\n                            table.entries[k] = entries[key];\n                            ++cnt;\n                        }\n                        resolve(cnt);                        \n                    } catch (error) {\n                        return reject(error);\n                    }\n                }, (err) => {\n                    reject(err);\n                });\n        });\n    }\n\n    private createKey(ns: string, msgid: string) : string {\n        var escapedMsgId = this.escapeKey(msgid);\n        var prepend = \"\";\n        if (ns) {\n            prepend = ns + \":\";\n        }\n        return prepend + msgid;\n    }\n\n    private escapeKey(key: string): string {\n        return key.replace(/:/g, \"--\").toLowerCase();\n    }\n\n    private getEntry(locale: string, key: string): string|string[] {\n        return this.locales.hasOwnProperty(locale) && this.locales[locale].entries.hasOwnProperty(key) ? this.locales[locale].entries[key] : null;\n    }\n\n    private getValue(text: string|string[]) : string {\n        return typeof text == \"string\" ? text : this.randomizeValue(text);\n    }\n\n    private randomizeValue(a: Array<any>): string {\n        var i = Math.floor(Math.random() * a.length);\n        return this.getValue(a[i]);\n    }\n}\n\ninterface ILocaleEntry {\n    loaded: Promise.IThenable<boolean>;\n    entries: {\n        [key:string]: string|string[];\n    };\n}\n"]}