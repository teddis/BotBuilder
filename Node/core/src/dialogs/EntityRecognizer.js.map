{"version":3,"file":"EntityRecognizer.js","sourceRoot":"","sources":["EntityRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// \n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license.\n// \n// Microsoft Bot Framework: http://botframework.com\n// \n// Bot Builder SDK Github:\n// https://github.com/Microsoft/BotBuilder\n// \n// Copyright (c) Microsoft Corporation\n// All rights reserved.\n// \n// MIT License:\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport utils = require('../utils');\nimport sprintf = require('sprintf-js');\nimport chrono = require('chrono-node');\n\ninterface ILuisDateTimeEntity extends IEntity {\n    resolution: {\n        resolution_type: string;\n        date?: string;\n        time?: string;\n        comment?: string;\n        duration?: string;\n    };\n}\n\ninterface IChronoDuration extends IEntity {\n    resolution: {\n        resolution_type: string;\n        start: Date;\n        end?: Date;\n        ref?: Date;\n    };\n}\n\nexport interface IFindMatchResult {\n    index: number;\n    entity: string;\n    score: number;\n}\n\nexport class EntityRecognizer {\n    static dateExp = /^\\d{4}-\\d{2}-\\d{2}/i;\n    static yesExp = /^(1|y|yes|yep|sure|ok|true)/i;\n    static noExp = /^(2|n|no|nope|not|false)/i;\n    static numberExp = /[+-]?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)/;\n    static ordinalWords = 'first|second|third|fourth|fifth|sixth|seventh|eigth|ninth|tenth';\n\n    static findEntity(entities: IEntity[], type: string): IEntity {\n        for (var i = 0; entities && i < entities.length; i++) {\n            if (entities[i].type == type) {\n                return entities[i];\n            }\n        }\n        return null;\n    }\n\n    static findAllEntities(entities: IEntity[], type: string): IEntity[] {\n        var found: IEntity[] = [];\n        for (var i = 0; entities && i < entities.length; i++) {\n            if (entities[i].type == type) {\n                found.push(entities[i]);\n            }\n        }\n        return found;\n    }\n\n    static parseTime(utterance: string): Date;\n    static parseTime(entities: IEntity[]): Date;\n    static parseTime(entities: any): Date {\n        if (typeof entities == 'string') {\n            entities = EntityRecognizer.recognizeTime(entities);  \n        }\n        return EntityRecognizer.resolveTime(entities);\n    }\n\n    static resolveTime(entities: IEntity[]): Date {\n        var now = new Date();\n        var resolvedDate: Date;\n        var date: string;\n        var time: string;\n        entities.forEach((entity: ILuisDateTimeEntity) => {\n            if (entity.resolution) {\n                switch (entity.resolution.resolution_type || entity.type) {\n                    case 'builtin.datetime':\n                    case 'builtin.datetime.date':\n                    case 'builtin.datetime.time':\n                        var parts = (entity.resolution.date || entity.resolution.time).split('T');\n                        if (!date && this.dateExp.test(parts[0])) {\n                            date = parts[0];\n                        }\n                        if (!time && parts[1]) {\n                            time = 'T' + parts[1];\n                            if (time == 'TMO') {\n                                time = 'T08:00:00';\n                            } else if (time == 'TNI') {\n                                time = 'T20:00:00';\n                            } else if (time.length == 3) {\n                                time = time + ':00:00';\n                            } else if (time.length == 6) {\n                                time = time + ':00';\n                            }\n                        }\n                        break;\n                    case 'chrono.duration':\n                        // Date is already calculated\n                        var duration = <IChronoDuration>entity;\n                        resolvedDate = duration.resolution.start;\n                }\n            }\n        });\n        if (!resolvedDate && (date || time)) {\n            // The user can just say \"at 9am\" so we'll use today if no date.\n            if (!date) {\n                date = utils.toDate8601(now);\n            }\n            if (time) {\n                date += time;\n            }\n            resolvedDate = new Date(date);\n        }\n        return resolvedDate;\n    }\n\n    static recognizeTime(utterance: string, refDate?: Date): IChronoDuration {\n        var response: IChronoDuration;\n        try {\n            var results = chrono.parse(utterance, refDate);\n            if (results && results.length > 0) {\n                var duration = results[0];\n                response = {\n                    type: 'chrono.duration',\n                    entity: duration.text,\n                    startIndex: duration.index,\n                    endIndex: duration.index + duration.text.length,\n                    resolution: {\n                        resolution_type: 'chrono.duration',\n                        start: duration.start.date()\n                    }\n                };\n                if (duration.end) {\n                    response.resolution.end = duration.end.date();\n                }\n                if (duration.ref) {\n                    response.resolution.ref = duration.ref;\n                }\n                // Calculate a confidence score based on text coverage and call compareConfidence.\n                response.score = duration.text.length / utterance.length;\n            }\n        } catch (err) {\n            console.error('Error recognizing time: ' + err.toString());\n            response = null;\n        }\n        return response;\n    }\n\n    static parseNumber(entities: string | IEntity[]): number {\n        var entity: IEntity;\n        if (typeof entities == 'string') {\n            entity = { type: 'text', entity: (<string>entities).trim() };\n        } else {\n            entity = EntityRecognizer.findEntity(<IEntity[]>entities, 'builtin.number');\n        }\n        if (entity) {\n            var match = this.numberExp.exec(entity.entity);\n            if (match) {\n                return Number(match[0]);\n            }\n            var oWordMatch = this.findBestMatch(this.ordinalWords, entity.entity, 1.0);\n            if (oWordMatch) {\n                return oWordMatch.index+1;\n            }\n        }\n        return Number.NaN;\n    }\n\n    static parseBoolean(utterance: string): boolean {\n        utterance = utterance.trim();\n        if (EntityRecognizer.yesExp.test(utterance)) {\n            return true;\n        } else if (EntityRecognizer.noExp.test(utterance)) {\n            return false;\n        }\n        return undefined;\n    }\n\n    static findBestMatch(choices: string | Object | string[], utterance: string, threshold = 0.6): IFindMatchResult {\n        var best: IFindMatchResult;\n        var matches = EntityRecognizer.findAllMatches(choices, utterance, threshold);\n        matches.forEach((value) => {\n            if (!best || value.score > best.score) {\n                best = value;\n            }\n        });\n        return best;\n    }\n    \n    static findAllMatches(choices: string | Object | string[], utterance: string, threshold = 0.6): IFindMatchResult[] {\n        var matches: IFindMatchResult[] = [];\n        utterance = utterance.trim().toLowerCase();\n        var tokens = utterance.split(' ');\n        EntityRecognizer.expandChoices(choices).forEach((choice: string, index: number) => {\n            var score = 0.0;\n            var value = choice.trim().toLowerCase();\n            if (value.indexOf(utterance) >= 0) {\n                score = utterance.length / value.length;\n            } else if (utterance.indexOf(value) >= 0) {\n                score = Math.min(0.5 + (value.length / utterance.length), 0.9);\n            } else {\n                var matched = '';\n                tokens.forEach((token) => {\n                    if (value.indexOf(token) >= 0) {\n                        matched += token;\n                    }\n                });\n                score = matched.length / value.length;\n            }\n            if (score >= threshold) {\n                matches.push({ index: index, entity: choice, score: score });\n            }\n        });\n        return matches;\n    }\n    \n    static expandChoices(choices: string | Object | string[]): string[] {\n        if (!choices) {\n            return [];\n        } else if (Array.isArray(choices)) {\n            return choices;\n        } else if (typeof choices == 'string') {\n            return (<string>choices).split('|');\n        } else if (typeof choices == 'object') {\n            var list: string[] = [];\n            for (var key in choices) {\n                list.push(key);\n            }\n            return list;\n        } else {\n            return [(<string>choices).toString()];\n        }\n    }\n}\n"]}