{"version":3,"file":"LuisRecognizer.js","sourceRoot":"","sources":["LuisRecognizer.ts"],"names":[],"mappings":"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","sourcesContent":["// \n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license.\n// \n// Microsoft Bot Framework: http://botframework.com\n// \n// Bot Builder SDK Github:\n// https://github.com/Microsoft/BotBuilder\n// \n// Copyright (c) Microsoft Corporation\n// All rights reserved.\n// \n// MIT License:\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport { IRecognizeContext } from './Dialog';\nimport { IIntentRecognizer, IIntentRecognizerResult } from './IntentRecognizerSet';\nimport * as utils from '../utils';\nimport * as request from 'request';\n\nexport interface ILuisModelMap {\n    [local: string]: string;\n}\n\nexport class LuisRecognizer implements IIntentRecognizer {\n    private models: ILuisModelMap;\n\n    constructor(models: string|ILuisModelMap) {\n        if (typeof models == 'string') {\n            this.models = { '*': <string>models };\n        } else {\n            this.models = <ILuisModelMap>(models || {});\n        }\n    }\n\n    public recognize(context: IRecognizeContext, cb: (err: Error, result: IIntentRecognizerResult) => void): void {\n        var result: IIntentRecognizerResult = { score: 0.0, intent: null };\n        if (context && context.message && context.message.text) {\n            var utterance = context.message.text;\n            var locale = context.locale || '*';\n            var model = this.models.hasOwnProperty(locale) ? this.models[locale] : this.models['*'];\n            if (model) {\n                LuisRecognizer.recognize(utterance, model, (err, intents, entities) => {\n                    if (!err) {\n                        result.intents = intents;\n                        result.entities = entities;\n\n                        // Return top intent\n                        var top: IIntent;\n                        intents.forEach((intent) => {\n                            if (top) {\n                                if (intent.score > top.score) {\n                                    top = intent;\n                                }\n                            } else {\n                                top = intent;\n                            }\n                        });\n                        if (top) {\n                            result.score = top.score;\n                            result.intent = top.intent;\n\n                            // Correct score for 'none' intent\n                            // - The 'none' intent often has a score of 1.0 which\n                            //   causes issues when trying to recognize over multiple\n                            //   model. Setting to 0.1 lets the intent still be \n                            //   triggered but keeps it from trompling other models.\n                            switch (top.intent.toLowerCase()) {\n                                case 'builtin.intent.none':\n                                case 'none':\n                                    result.score = 0.1;\n                                    break;\n                            }\n                        }\n                        cb(null, result);\n                    } else {\n                        cb(err, null);\n                    }\n                });\n            } else {\n                cb(new Error(\"LUIS model not found for locale '\" + locale + \"'.\"), null);\n            }\n        } else {\n            cb(null, result);\n        }\n    }\n\n    static recognize(utterance: string, modelUrl: string, callback: (err: Error, intents?: IIntent[], entities?: IEntity[]) => void): void {\n        try {\n            var uri = modelUrl.trim();\n            if (uri.lastIndexOf('&q=') != uri.length - 3) {\n                uri += '&q=';\n            }\n            uri += encodeURIComponent(utterance || '');\n            request.get(uri, (err: Error, res: any, body: string) => {\n                // Parse result\n                var result: ILuisResults;\n                try {\n                    if (!err) {\n                        result = JSON.parse(body);\n                        result.intents = result.intents || [];\n                        result.entities = result.entities || [];\n                        if (result.intents.length == 1 && typeof result.intents[0].score !== 'number') {\n                            // Intents for the builtin Cortana app don't return a score.\n                            result.intents[0].score = 1.0;\n                        }\n                    }\n                } catch (e) {\n                    err = e;\n                }\n\n                // Return result\n                try {\n                    if (!err) {\n                        callback(null, result.intents, result.entities);\n                    } else {\n                        var m = err.toString();\n                        callback(err instanceof Error ? err : new Error(m));\n                    }\n                } catch (e) {\n                    console.error(e.toString());\n                }\n            });\n        } catch (err) {\n            callback(err instanceof Error ? err : new Error(err.toString()));\n        }\n    }\n}\n\ninterface ILuisResults {\n    query: string;\n    intents: IIntent[];\n    entities: IEntity[];\n}\n"]}