{"version":3,"file":"IntentRecognizerSet.js","sourceRoot":"","sources":["IntentRecognizerSet.ts"],"names":[],"mappings":"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","sourcesContent":["// \n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license.\n// \n// Microsoft Bot Framework: http://botframework.com\n// \n// Bot Builder SDK Github:\n// https://github.com/Microsoft/BotBuilder\n// \n// Copyright (c) Microsoft Corporation\n// All rights reserved.\n// \n// MIT License:\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport { IRecognizeContext, IRecognizeResult } from './Dialog';\nimport * as utils from '../utils';\n\nexport enum RecognizeOrder { parallel, series }\n\nexport interface IIntentRecognizer {\n    recognize(context: IRecognizeContext, done: (err: Error, result: IIntentRecognizerResult) => void): void;\n}\n\nexport interface IIntentRecognizerResult extends IRecognizeResult {\n    intent: string;\n    expression?: RegExp;\n    matched?: string[]; \n    intents?: IIntent[];\n    entities?: IEntity[];\n}\n\nexport interface IIntentRecognizerSetOptions {\n    intentThreshold?: number;\n    recognizeOrder?: RecognizeOrder;\n    recognizers?: IIntentRecognizer[];\n    processLimit?: number;\n    stopIfExactMatch?: boolean;\n} \n\nexport class IntentRecognizerSet implements IIntentRecognizer {\n    constructor(private options: IIntentRecognizerSetOptions = {}) {\n        if (typeof this.options.intentThreshold !== 'number') {\n            this.options.intentThreshold = 0.1;\n        }\n        if (!this.options.hasOwnProperty('recognizeOrder')) {\n            this.options.recognizeOrder = RecognizeOrder.parallel;\n        }\n        if (!this.options.recognizers) {\n            this.options.recognizers = [];\n        }\n        if (!this.options.processLimit) {\n            this.options.processLimit = 4;\n        }\n        if (!this.options.hasOwnProperty('stopIfExactMatch')) {\n            this.options.stopIfExactMatch = true;\n        }\n    }\n\n    public recognize(context: IRecognizeContext, done: (err: Error, result: IIntentRecognizerResult) => void): void {\n        if (this.options.recognizeOrder == RecognizeOrder.parallel) {\n            this.recognizeInParallel(context, done);\n        } else {\n            this.recognizeInSeries(context, done);\n        }\n    }\n\n    public recognizer(plugin: IIntentRecognizer): this {\n        // Append recognizer\n        this.options.recognizers.push(plugin);\n        return this;\n    }\n\n    private recognizeInParallel(context: IRecognizeContext, done: (err: Error, result: IIntentRecognizerResult) => void): void {\n        var result: IIntentRecognizerResult = { score: 0.0, intent: null };\n        async.eachLimit(this.options.recognizers, this.options.processLimit, (recognizer, cb) => {\n            try {\n                recognizer.recognize(context, (err, r) => {\n                    if (!err && r && r.score > result.score && r.score >= this.options.intentThreshold) {\n                        result = r;\n                    }\n                    cb(err);\n                });\n            } catch (e) {\n                cb(e);\n            }\n        }, (err) => {\n            if (!err) {\n                done(null, result);\n            } else {\n                var msg = err.toString();\n                done(err instanceof Error ? err : new Error(msg), null);\n            }\n        });\n    }\n\n    private recognizeInSeries(context: IRecognizeContext, done: (err: Error, result: IIntentRecognizerResult) => void): void {\n        var i = 0;\n        var result: IIntentRecognizerResult = { score: 0.0, intent: null };\n        async.whilst(() => {\n            return (i < this.options.recognizers.length && (result.score < 1.0 || !this.options.stopIfExactMatch));\n        }, (cb) => {\n            try {\n                var recognizer = this.options.recognizers[i++];\n                recognizer.recognize(context, (err, r) => {\n                    if (!err && r && r.score > result.score && r.score >= this.options.intentThreshold) {\n                        result = r;\n                    }\n                    cb(err);\n                });\n            } catch (e) {\n                cb(e);\n            }\n        }, (err) => {\n            if (!err) {\n                done(null, result);\n            } else {\n                done(err instanceof Error ? err : new Error(err.toString()), null);\n            }\n        });\n    }\n}"]}