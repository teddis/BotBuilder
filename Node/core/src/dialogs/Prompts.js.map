{"version":3,"file":"Prompts.js","sourceRoot":"","sources":["Prompts.ts"],"names":[],"mappings":"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","sourcesContent":["// \n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license.\n// \n// Microsoft Bot Framework: http://botframework.com\n// \n// Bot Builder SDK Github:\n// https://github.com/Microsoft/BotBuilder\n// \n// Copyright (c) Microsoft Corporation\n// All rights reserved.\n// \n// MIT License:\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport dlg = require('./Dialog');\nimport ses = require('../Session');\nimport consts = require('../consts');\nimport entities = require('./EntityRecognizer');\nimport mb = require('../Message');\nimport Channel = require('../Channel');\nimport dl = require('../bots/Library');\nimport kb = require('../cards/Keyboard');\nimport ca = require('../cards/CardAction');\nimport logger = require('../logger');\n\nexport enum PromptType { text, number, confirm, choice, time, attachment }\n\nexport enum ListStyle { none, inline, list, button, auto }\n\nexport interface IPromptOptions {\n    retryPrompt?: string|string[]|IMessage|IIsMessage;\n    maxRetries?: number;\n    refDate?: number;\n    listStyle?: ListStyle;\n    promptAfterAction?: boolean;\n    localizationNamespace?: string;\n}\n\nexport interface IPromptArgs extends IPromptOptions {\n    promptType: PromptType;\n    prompt: string|string[]|IMessage|IIsMessage;\n    enumValues?: string[];\n    retryCnt?: number;\n}\n\nexport interface IPromptResult<T> extends dlg.IDialogResult<T> {\n    score: number;\n    promptType?: PromptType;\n}\n\nexport interface IPromptRecognizer {\n    recognize<T>(args: IPromptRecognizerArgs, callback: (result: IPromptResult<T>) => void, session?: ISession): void;\n}\n\nexport interface IPromptRecognizerArgs {\n    promptType: PromptType;\n    locale: string;\n    utterance: string;\n    attachments: IAttachment[];\n    enumValues?: string[];\n    refDate?: number;\n}\n\nexport interface IPromptsOptions {\n    recognizer?: IPromptRecognizer;\n    promptAfterAction?: boolean;\n}\n\nexport interface IChronoDuration extends IEntity {\n    resolution: {\n        start: Date;\n        end?: Date;\n        ref?: Date;\n    };\n}\n\nexport class SimplePromptRecognizer implements IPromptRecognizer {\n    public recognize(args: IPromptRecognizerArgs, callback: (result: IPromptResult<any>) => void, session?: ISession): void {\n        function findChoice(args: IPromptRecognizerArgs, text: string) {\n            var best = entities.EntityRecognizer.findBestMatch(args.enumValues, text);\n            if (!best) {\n                var n = entities.EntityRecognizer.parseNumber(text);\n                if (!isNaN(n) && n > 0 && n <= args.enumValues.length) {\n                    best = { index: n - 1, entity: args.enumValues[n - 1], score: 1.0 };\n                }\n            }\n            return best;\n        }\n\n        // Recognize value\n        var score = 0.0;\n        var response: any;\n        var text = args.utterance.trim();\n        switch (args.promptType) {\n            default:\n            case PromptType.text:\n                // This is an open ended question so it's a little tricky to know what to pass as a confidence\n                // score. Currently we're saying that we have 0.1 confidence that we understand the users intent\n                // which will give all of the prompts parents a chance to capture the utterance. If no one \n                // captures the utterance we'll return the full text of the utterance as the result.\n                score = 0.5;\n                response = text;\n                break;\n            case PromptType.number:\n                var n = entities.EntityRecognizer.parseNumber(text);\n                if (!isNaN(n)) {\n                    var score = n.toString().length / text.length;\n                    response = n;\n                }\n                break;\n            case PromptType.confirm:\n                var b = entities.EntityRecognizer.parseBoolean(text);\n                if (typeof b !== 'boolean') {\n                    var best = findChoice(args, text);\n                    if (best) {\n                        b = (best.index === 0); // enumValues == ['yes', 'no']\n                    }\n                }\n                if (typeof b == 'boolean') {\n                    score = 1.0;\n                    response = b;\n                }\n                break;\n            case PromptType.time:\n                var entity = entities.EntityRecognizer.recognizeTime(text, args.refDate ? new Date(args.refDate) : null);\n                if (entity) {\n                    score = entity.entity.length / text.length;\n                    response = entity;\n                } \n                break;\n            case PromptType.choice:\n                var best = findChoice(args, text);\n                if (best) {\n                    score = best.score;\n                    response = best;\n                }\n                break;\n            case PromptType.attachment:\n                if (args.attachments && args.attachments.length > 0) {\n                    score = 1.0;\n                    response = args.attachments;\n                }\n                break;\n        }\n\n        // Return results\n        if (score > 0) {\n            callback({ score: score, resumed: dlg.ResumeReason.completed, promptType: args.promptType, response: response });\n        } else {\n            callback({ score: score, resumed: dlg.ResumeReason.notCompleted, promptType: args.promptType });\n        }\n    }\n} \n\nexport class Prompts extends dlg.Dialog {\n    private static options: IPromptsOptions = {\n        recognizer: new SimplePromptRecognizer(),\n        promptAfterAction: true\n    };\n    \n    private static defaultRetryPrompt = {\n        text: \"default_text\",\n        number: \"default_number\",\n        confirm: \"default_confirm\",\n        choice: \"default_choice\", \n        time: \"default_time\", \n        attachment: \"default_file\"  \n    };\n\n    public begin(session: ses.Session, args: IPromptArgs): void {\n        args = <any>args || {};\n        args.promptAfterAction = args.hasOwnProperty('promptAfterAction') ? args.promptAfterAction : Prompts.options.promptAfterAction;\n        args.retryCnt = 0;\n        for (var key in args) {\n            if (args.hasOwnProperty(key)) {\n                session.dialogData[key] = (<any>args)[key];\n            }\n        }\n        this.sendPrompt(session, args);\n    }\n\n    public replyReceived(session: ses.Session, result?: IPromptResult<any>): void {\n        var args: IPromptArgs = session.dialogData;\n        if (result.error || result.resumed == dlg.ResumeReason.completed) {\n            result.promptType = args.promptType;\n            session.endDialogWithResult(result);\n        } else if (typeof args.maxRetries === 'number' && args.retryCnt >= args.maxRetries) {\n            result.promptType = args.promptType;\n            result.resumed = dlg.ResumeReason.notCompleted;\n            session.endDialogWithResult(result);\n        } else {\n            args.retryCnt++;\n            this.sendPrompt(session, args, true);\n        }\n    }\n    public dialogResumed<T>(session: ses.Session, result: dlg.IDialogResult<any>): void {\n        // Comming back from an action so re-prompt the user.\n        var args: IPromptArgs = session.dialogData;\n        if (args.promptAfterAction) {\n            this.sendPrompt(session, args);\n        }\n    }\n\n    public recognize(context: dlg.IRecognizeContext, cb: (err: Error, result: dlg.IRecognizeResult) => void): void {\n        var args: IPromptArgs = context.dialogData;\n        Prompts.options.recognizer.recognize({\n            promptType: args.promptType,\n            utterance: context.message.text,\n            locale: context.message.textLocale,\n            attachments: context.message.attachments,\n            enumValues: args.enumValues,\n            refDate: args.refDate\n        }, (result) => {\n            if (result.error) {\n                cb(result.error, null);\n            } else {\n                cb(null, result);\n            }\n        });\n    }\n\n    \n    private sendPrompt(session: ses.Session, args: IPromptArgs, retry = false): void {\n        logger.debug(\"prompts::sendPrompt called\");                                               \n\n        if (retry && typeof args.retryPrompt === 'object' && !Array.isArray(args.retryPrompt)) {\n            // Send native IMessage\n            session.send(args.retryPrompt);            \n        } else if (typeof args.prompt === 'object' && !Array.isArray(args.prompt)) {\n            // Send native IMessage\n            session.send(args.prompt);            \n        } else {\n            // Calculate list style.\n            var style = ListStyle.none;\n            if (args.promptType == PromptType.choice || args.promptType == PromptType.confirm) {\n                style = args.listStyle;\n                if (style == ListStyle.auto) {\n                    if (Channel.supportsKeyboards(session, args.enumValues.length)) {\n                        style = ListStyle.button;\n                    } else if (!retry && args.promptType == PromptType.choice) {\n                        style = args.enumValues.length < 3 ? ListStyle.inline : ListStyle.list;\n                    } else {\n                        style = ListStyle.none;\n                    }\n                }\n            }\n            \n            // Get message message\n            var prompt: string;\n            if (retry) {\n                if (args.retryPrompt) {\n                    prompt = mb.Message.randomPrompt(<any>args.retryPrompt);\n                } else {\n                    var type = PromptType[args.promptType];\n                    prompt = mb.Message.randomPrompt((<any>Prompts.defaultRetryPrompt)[type]);\n                    args.localizationNamespace = consts.Library.system;\n                    logger.debug(\"prompts::sendPrompt setting ns to %s\", args.localizationNamespace);                                                                   \n                }\n            } else {\n                prompt = mb.Message.randomPrompt(<any>args.prompt);\n            }\n                                                                               \n            var locale:string = session.preferredLocale();\n            prompt = session.localizer.gettext(locale, prompt, args.localizationNamespace);\n            \n                        \n            // Append list\n            var connector = '';\n            var list: string;\n            var msg = new mb.Message();\n            switch (style) {\n                case ListStyle.button:\n                    var buttons: ca.CardAction[] = [];\n                    for (var i = 0; i < session.dialogData.enumValues.length; i++) {\n                        var option = session.dialogData.enumValues[i];\n                        buttons.push(ca.CardAction.imBack(session, option, option));\n                    }\n                    msg.text(prompt)\n                       .attachments([new kb.Keyboard(session).buttons(buttons)]);\n                    break;\n                case ListStyle.inline:\n                    list = ' (';\n                    args.enumValues.forEach((v, index) => {\n                        var value = v.toString();\n                        list += connector + (index + 1) + '. ' + session.localizer.gettext(locale, value, consts.Library.system);\n                        if (index == args.enumValues.length - 2) {\n                            connector = index == 0 ? session.localizer.gettext(locale, \"list_or\", consts.Library.system) : session.localizer.gettext(locale, \"list_or_more\", consts.Library.system);\n                        } else {\n                            connector = ', ';\n                        } \n                    });\n                    list += ')';\n                    msg.text(prompt + '%s', list);\n                    break;\n                case ListStyle.list:\n                    list = '\\n   ';\n                    args.enumValues.forEach((v, index) => {\n                        var value = v.toString();\n                        list += connector + (index + 1) + '. ' + session.localizer.gettext(locale, value, args.localizationNamespace);\n                        connector = '\\n   ';\n                    });\n                    msg.text(prompt + '%s', list);\n                    break;\n                default:\n                    msg.text(prompt);\n                    break;\n            }\n            \n            // Send message\n            session.send(msg);\n        }\n        session.sendBatch();\n    }\n\n    static configure(options: IPromptsOptions): void {\n        if (options) {\n            for (var key in options) {\n                if (options.hasOwnProperty(key)) {\n                    (<any>Prompts.options)[key] = (<any>options)[key];\n                }\n            }\n        }\n    }\n\n    static text(session: ses.Session, prompt: string|string[]|IMessage|IIsMessage, options?: IPromptOptions): void {\n        var args: IPromptArgs = <any>options || {};\n        args.promptType = PromptType.text;\n        args.prompt = prompt;\n        beginPrompt(session, args);\n    }\n\n    static number(session: ses.Session, prompt: string|string[]|IMessage|IIsMessage, options?: IPromptOptions): void {\n        var args: IPromptArgs = <any>options || {};\n        args.promptType = PromptType.number;\n        args.prompt = prompt;\n        beginPrompt(session, args);\n    }\n\n    static confirm(session: ses.Session, prompt: string|string[]|IMessage|IIsMessage, options?: IPromptOptions): void {\n        var locale:string = session.preferredLocale();\n        var args: IPromptArgs = <any>options || {};\n        args.promptType = PromptType.confirm;\n        args.prompt = prompt;\n        args.enumValues = [\n            session.localizer.gettext(locale, 'confirm_yes', consts.Library.system),\n            session.localizer.gettext(locale, 'confirm_no', consts.Library.system)\n        ];\n        args.listStyle = args.hasOwnProperty('listStyle') ? args.listStyle : ListStyle.auto;\n        beginPrompt(session, args);\n    }\n\n    static choice(session: ses.Session, prompt: string|string[]|IMessage|IIsMessage, choices: string|Object|string[], options?: IPromptOptions): void {\n        var args: IPromptArgs = <any>options || {};\n        args.promptType = PromptType.choice;\n        args.prompt = prompt;\n        args.listStyle = args.hasOwnProperty('listStyle') ? args.listStyle : ListStyle.auto;\n        var c = entities.EntityRecognizer.expandChoices(choices);\n        if (c.length == 0) {\n            console.error(\"0 length choice for prompt:\", prompt);\n            throw \"0 length choice list supplied\";\n        }\n        args.enumValues = c;\n        beginPrompt(session, args);\n    }\n\n    static time(session: ses.Session, prompt: string|string[]|IMessage|IIsMessage, options?: IPromptOptions): void {\n        var args: IPromptArgs = <any>options || {};\n        args.promptType = PromptType.time;\n        args.prompt = prompt;\n        beginPrompt(session, args);\n    }\n    \n    static attachment(session: ses.Session, prompt: string|string[]|IMessage|IIsMessage, options?: IPromptOptions): void {\n        var args: IPromptArgs = <any>options || {};\n        args.promptType = PromptType.attachment;\n        args.prompt = prompt;\n        beginPrompt(session, args);\n    }\n}\ndl.systemLib.dialog(consts.DialogId.Prompts, new Prompts());\n\nfunction beginPrompt(session: ses.Session, args: IPromptArgs) {\n    // Fixup prompts\n    if (typeof args.prompt == 'object' && (<IIsMessage>args.prompt).toMessage) {\n        args.prompt = (<IIsMessage>args.prompt).toMessage();\n    }\n    if (typeof args.retryPrompt == 'object' && (<IIsMessage>args.retryPrompt).toMessage) {\n        args.retryPrompt = (<IIsMessage>args.retryPrompt).toMessage();\n    }\n    session.beginDialog(consts.DialogId.Prompts, args);\n}\n"]}