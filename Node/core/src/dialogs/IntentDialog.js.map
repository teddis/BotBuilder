{"version":3,"file":"IntentDialog.js","sourceRoot":"","sources":["IntentDialog.ts"],"names":[],"mappings":"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","sourcesContent":["// \n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license.\n// \n// Microsoft Bot Framework: http://botframework.com\n// \n// Bot Builder SDK Github:\n// https://github.com/Microsoft/BotBuilder\n// \n// Copyright (c) Microsoft Corporation\n// All rights reserved.\n// \n// MIT License:\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport ses = require('../Session');\nimport actions = require('./DialogAction');\nimport consts = require('../consts');\nimport logger = require('../logger');\nimport async = require('async');\nimport { Dialog, IRecognizeContext, IRecognizeResult, IDialogResult } from './Dialog';\nimport { IntentRecognizerSet, IIntentRecognizerSetOptions, IIntentRecognizer, IIntentRecognizerResult } from './IntentRecognizerSet';\nimport { RegExpRecognizer } from './RegExpRecognizer';\n\nexport enum RecognizeMode { onBegin, onBeginIfRoot, onReply }\n\nexport interface IIntentDialogOptions extends IIntentRecognizerSetOptions {\n    recognizeMode?: RecognizeMode;\n} \n\nexport class IntentDialog extends Dialog {\n    private beginDialog: IBeginDialogHandler;\n    private handlers = <IIntentHandlerMap>{};\n    private recognizers: IntentRecognizerSet;\n    private recognizeMode: RecognizeMode\n\n    constructor(options: IIntentDialogOptions = {}) {\n        super();\n        this.recognizers = new IntentRecognizerSet(options);\n        this.recognizeMode = options.recognizeMode || RecognizeMode.onBeginIfRoot;\n    }\n\n    public begin<T>(session: ses.Session, args: any): void {\n        var mode = this.recognizeMode;\n        var isRoot = (session.sessionState.callstack.length == 1);\n        var recognize = (mode == RecognizeMode.onBegin || (isRoot && mode == RecognizeMode.onBeginIfRoot)); \n        if (this.beginDialog) {\n            try {\n                logger.info(session, 'IntentDialog.begin()');\n                this.beginDialog(session, args, () => {\n                    if (recognize) {\n                        this.replyReceived(session);\n                    }\n                });\n            } catch (e) {\n                this.emitError(session, e);\n            }\n        } else if (recognize) {\n            this.replyReceived(session);\n        }\n    }\n\n    public replyReceived(session: ses.Session, recognizeResult?: IRecognizeResult): void {\n        if (!recognizeResult) {\n            var locale = session.preferredLocale();\n            this.recognize({ message: session.message, locale: locale, dialogData: session.dialogData, activeDialog: true }, (err, result) => {\n                if (!err) {\n                    this.invokeIntent(session, <IIntentRecognizerResult>result);\n                } else {\n                    this.emitError(session, err);\n                }\n            });\n        } else {\n            this.invokeIntent(session, <IIntentRecognizerResult>recognizeResult);\n        }\n    }\n\n    public dialogResumed(session: ses.Session, result: IDialogResult<any>): void {\n        var activeIntent: string = session.dialogData[consts.Data.Intent];\n        if (activeIntent && this.handlers.hasOwnProperty(activeIntent)) {\n            try {\n                this.handlers[activeIntent](session, result);\n            } catch (e) {\n                this.emitError(session, e);\n            }\n        } else {\n            super.dialogResumed(session, result);\n        }\n    }\n\n    public recognize(context: IRecognizeContext, cb: (err: Error, result: IRecognizeResult) => void): void {\n        this.recognizers.recognize(context, cb);\n    }\n\n    public onBegin(handler: IBeginDialogHandler): this {\n        this.beginDialog = handler;\n        return this;\n    }\n\n    public matches(intent: string|RegExp, dialogId: string|actions.IDialogWaterfallStep[]|actions.IDialogWaterfallStep, dialogArgs?: any): this {\n        // Find ID and verify unique\n        var id: string;\n        if (intent) {\n            if (typeof intent === 'string') {\n                id = intent;\n            } else {\n                id = (<RegExp>intent).toString();\n                this.recognizers.recognizer(new RegExpRecognizer(id, <RegExp>intent));\n            }\n        }\n        if (this.handlers.hasOwnProperty(id)) {\n            throw new Error(\"A handler for '\" + id + \"' already exists.\");\n        }\n\n        // Register handler\n        if (Array.isArray(dialogId)) {\n            this.handlers[id] = actions.waterfall(dialogId);\n        } else if (typeof dialogId === 'string') {\n            this.handlers[id] = actions.DialogAction.beginDialog(<string>dialogId, dialogArgs);\n        } else {\n            this.handlers[id] = actions.waterfall([<actions.IDialogWaterfallStep>dialogId]);\n        }\n        return this;\n    }\n\n    public matchesAny(intents: string[]|RegExp[], dialogId: string|actions.IDialogWaterfallStep[]|actions.IDialogWaterfallStep, dialogArgs?: any): this {\n        for (var i = 0; i < intents.length; i++) {\n            this.matches(intents[i], dialogId, dialogArgs);\n        }\n        return this;\n    }\n\n    public onDefault(dialogId: string|actions.IDialogWaterfallStep[]|actions.IDialogWaterfallStep, dialogArgs?: any): this {\n        // Register handler\n        if (Array.isArray(dialogId)) {\n            this.handlers[consts.Intents.Default] = actions.waterfall(dialogId);\n        } else if (typeof dialogId === 'string') {\n            this.handlers[consts.Intents.Default] = actions.DialogAction.beginDialog(<string>dialogId, dialogArgs);\n        } else {\n            this.handlers[consts.Intents.Default] = actions.waterfall([<actions.IDialogWaterfallStep>dialogId]);\n        }\n        return this;\n    }\n\n    public recognizer(plugin: IIntentRecognizer): this {\n        // Append recognizer\n        this.recognizers.recognizer(plugin);\n        return this;\n    }\n\n    private invokeIntent(session: ses.Session, recognizeResult: IIntentRecognizerResult): void {\n        var activeIntent: string;\n        if (recognizeResult.intent && this.handlers.hasOwnProperty(recognizeResult.intent)) {\n            logger.info(session, 'IntentDialog.matches(%s)', recognizeResult.intent);\n            activeIntent = recognizeResult.intent;                \n        } else if (this.handlers.hasOwnProperty(consts.Intents.Default)) {\n            logger.info(session, 'IntentDialog.onDefault()');\n            activeIntent = consts.Intents.Default;\n        }\n        if (activeIntent) {\n            try {\n                session.dialogData[consts.Data.Intent] = activeIntent;\n                this.handlers[activeIntent](session, recognizeResult);\n            } catch (e) {\n                this.emitError(session, e);\n            }\n        } else {\n            logger.warn(session, 'IntentDialog - no intent handler found for %s', recognizeResult.intent);\n        }\n    }\n\n    private emitError(session: ses.Session, err: Error): void {\n        var m = err.toString();\n        err = err instanceof Error ? err : new Error(m);\n        session.error(err);\n    }\n}\n\ninterface IIntentHandlerMap {\n    [id: string]: IDialogHandler<any>;\n}\n"]}