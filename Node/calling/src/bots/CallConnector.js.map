{"version":3,"file":"CallConnector.js","sourceRoot":"","sources":["CallConnector.ts"],"names":[],"mappings":"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","sourcesContent":["//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license.\n//\n// Microsoft Bot Framework: http://botframework.com\n//\n// Bot Builder SDK Github:\n// https://github.com/Microsoft/BotBuilder\n//\n// Copyright (c) Microsoft Corporation\n// All rights reserved.\n//\n// MIT License:\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport ucb = require('./UniversalCallBot');\nimport bs = require('../storage/BotStorage');\nimport events = require('events');\nimport request = require('request');\nimport async = require('async');\nimport url = require('url');\nimport http = require('http');\nimport utils = require('../utils');\nimport consts = require('../consts');\nvar Busboy = require('busboy');\nvar jwt = require('jsonwebtoken');\nvar getPem = require('rsa-pem-from-mod-exp');\nvar base64url = require('base64url');\n\n// Fetch token once per day\nvar keysLastFetched = 0;\nvar cachedKeys: IKey[];\nvar issuer: string;\n\nexport interface ICallConnectorSettings {\n    callbackUrl: string;\n    appId?: string;\n    appPassword?: string;\n    endpoint?: ICallConnectorEndpoint;\n    serviceUrl?: string;\n    stateUrl?: string;\n}\n\nexport interface ICallConnectorEndpoint {\n    refreshEndpoint: string;\n    refreshScope: string;\n    verifyEndpoint: string;\n    verifyIssuer: string;\n    stateEndpoint: string;\n}\n\nexport class CallConnector implements ucb.ICallConnector, bs.IBotStorage {\n    private handler: (event: IEvent, cb?: (err: Error) => void) => void;\n    private accessToken: string;\n    private accessTokenExpires: number;\n    private responses: { [id:string]: (err: Error, repsonse?: any) => void; } = {};\n\n    constructor(private settings: ICallConnectorSettings) {\n        if (!this.settings.endpoint) {\n            this.settings.endpoint = {\n                refreshEndpoint: 'https://login.microsoftonline.com/common/oauth2/v2.0/token',\n                refreshScope: 'https://graph.microsoft.com/.default',\n                verifyEndpoint: 'https://api.aps.skype.com/v1/.well-known/openidconfiguration',\n                verifyIssuer: 'https://api.botframework.com',\n                stateEndpoint: this.settings.stateUrl || 'https://state.botframework.com'\n            }\n        }\n    }\n\n    public listen(): IWebMiddleware {\n        return (req: IWebRequest, res: IWebResponse) => {\n            var correlationId = req.headers['X-Microsoft-Skype-Chain-ID'];\n            if (req.is('application/json')) {\n                this.parseBody(req, (err, body) => {\n                    if (!err) {\n                        body.correlationId = correlationId;\n                        req.body = body;\n                        this.verifyBotFramework(req, res);\n                    } else {\n                        res.status(400);\n                        res.end();\n                    }\n                });\n            } else if (req.is('multipart/form-data')) {\n                this.parseFormData(req, (err, body) => {\n                    if (!err) {\n                        body.correlationId = correlationId;\n                        req.body = body;\n                        this.verifyBotFramework(req, res);\n                    } else {\n                        res.status(400);\n                        res.end();\n                    }\n                });\n            } else {\n                res.status(400);\n                res.end();\n            }\n        };\n    }\n\n    private ensureCachedKeys(cb: (err: Error, keys: IKey[]) => void ): void {\n        var now = new Date().getTime();\n        // refetch keys every 24 hours\n        if (keysLastFetched < (now - 1000*60*60*24)) {\n            var options: request.Options = {\n                method: 'GET',\n                url: this.settings.endpoint.verifyEndpoint,\n                json: true\n            };\n            \n            request(options, (err, response, body) => {\n                if (!err && (response.statusCode >= 400 || !body)) {\n                    err = new Error(\"Failed to load openID config: \" + response.statusCode);\n                }\n\n                if (err) {\n                    cb(err, null);\n                } else {\n                    var openIdConfig = <IOpenIdConfig> body;\n                    issuer = openIdConfig.issuer;\n\n                    var options: request.Options = {\n                        method: 'GET',\n                        url: openIdConfig.jwks_uri,\n                        json: true\n                    };\n                    \n                    request(options, (err, response, body) => {\n                        if (!err && (response.statusCode >= 400 || !body)) {\n                            err = new Error(\"Failed to load Keys: \" + response.statusCode);\n                        }\n                        if (!err) {\n                            keysLastFetched = now;\n                        }\n                        cachedKeys = <IKey[]> body.keys;\n                        cb(err, cachedKeys);\n                    });\n                }\n            });\n        }\n        else {\n            cb(null, cachedKeys);\n        }\n    }\n\n    private getSecretForKey(keyId: string): string {\n        \n        for (var i = 0; i < cachedKeys.length; i++) {\n            if (cachedKeys[i].kid == keyId) {\n\n                var jwt = cachedKeys[i];\n                \n                var modulus = base64url.toBase64(jwt.n);\n\n                var exponent = jwt.e;\n\n                return getPem(modulus, exponent);\n            }\n        }\n        return null;\n    }\n\n    private verifyBotFramework(req: IWebRequest, res: IWebResponse): void {\n        var token: string;\n        if (req.headers && req.headers.hasOwnProperty('authorization')) {\n            var auth = req.headers['authorization'].trim().split(' ');;\n            if (auth.length == 2 && auth[0].toLowerCase() == 'bearer') {\n                token = auth[1];\n            }\n        }\n\n        // Verify token\n        var callback = this.responseCallback(req, res);\n        if (token) {\n            this.ensureCachedKeys((err, keys) => {\n                if (!err) {\n                    var decoded = jwt.decode(token, { complete: true });\n                    var now = new Date().getTime() / 1000;\n\n                    // verify appId, issuer, token expirs and token notBefore\n                    if (decoded.payload.aud != this.settings.appId || decoded.payload.iss != issuer || \n                        now > decoded.payload.exp || now < decoded.payload.nbf) {\n                        res.status(403);\n                        res.end();   \n                    } else {\n                        var keyId = decoded.header.kid;\n                        var secret = this.getSecretForKey(keyId);\n\n                        try {\n                            decoded = jwt.verify(token, secret);\n                            this.dispatch(req.body, callback);\n                        } catch(err) {\n                            res.status(403);\n                            res.end();     \n                        }\n                    }\n                } else {\n                    res.status(500);\n                    res.end();\n                }\n            });\n        } else {\n            // Token not provided so \n            res.status(401);\n            res.end();\n        }\n    }\n\n    public onEvent(handler: (event: IEvent, cb?: (err: Error) => void) => void): void {\n        this.handler = handler;\n    }\n\n    public send(event: IEvent, cb: (err: Error) => void): void {\n        if (event.type == 'workflow' && event.address && event.address.conversation) {\n            var conversation = event.address.conversation;\n            if (this.responses.hasOwnProperty(conversation.id)) {\n                // Pop callback off responses list\n                var callback = this.responses[conversation.id];\n                delete this.responses[conversation.id];\n                \n                // Deliver message\n                var response: IWorkflow = utils.clone(event);\n                response.links = { 'callback': this.settings.callbackUrl };\n                (<any>response).appState = JSON.stringify(response.address);\n                delete response.type;\n                delete response.address;\n                callback(null, response);\n            }\n        } else {\n            cb(new Error('Invalid message sent to CallConnector.send().'));\n        }\n    }\n\n    public getData(context: bs.IBotStorageContext, callback: (err: Error, data: ICallConnectorStorageData) => void): void {\n        try {\n            // Build list of read commands\n            var root = this.getStoragePath();\n            var list: any[] = [];\n            if (context.userId) {\n                // Read userData\n                if (context.persistUserData) {\n                    list.push({ \n                        field: 'userData', \n                        url: root + '/users/' + encodeURIComponent(context.userId) \n                    });\n                }\n                if (context.conversationId) {\n                    // Read privateConversationData\n                    list.push({ \n                        field: 'privateConversationData',\n                        url: root + '/conversations/' + encodeURIComponent(context.conversationId) +\n                                    '/users/' + encodeURIComponent(context.userId)\n                    });\n                }\n            }\n            if (context.persistConversationData && context.conversationId) {\n                // Read conversationData\n                list.push({ \n                    field: 'conversationData',\n                    url: root + '/conversations/' + encodeURIComponent(context.conversationId)\n                });\n            }\n\n            // Execute reads in parallel\n            var data: ICallConnectorStorageData = {};\n            async.each(list, (entry, cb) => {\n                var options: request.Options = {\n                    method: 'GET',\n                    url: entry.url,\n                    json: true\n                };\n                this.authenticatedRequest(options, (err: Error, response: http.IncomingMessage, body: ICallConnectorState) => {\n                    if (!err && body) {\n                        try {\n                            var botData = body.data ? body.data : {};\n                            (<any>data)[entry.field + 'Hash'] = JSON.stringify(botData);\n                            (<any>data)[entry.field] = botData;\n                        } catch (e) {\n                            err = e;\n                        }\n                    }\n                    cb(err);\n                });\n            }, (err) => {\n                if (!err) {\n                    callback(null, data);\n                } else {\n                    var msg = err.toString();\n                    callback(err instanceof Error ? err : new Error(msg), null);\n                }\n            });\n        } catch (e) {\n            callback(e instanceof Error ? e : new Error(e.toString()), null);\n        }\n    }\n\n    public saveData(context: bs.IBotStorageContext, data: ICallConnectorStorageData, callback?: (err: Error) => void): void {\n        var list: any[] = [];\n        function addWrite(field: string, botData: any, url: string) {\n            var hashKey = field + 'Hash'; \n            var hash = JSON.stringify(botData);\n            if (!(<any>data)[hashKey] || hash !== (<any>data)[hashKey]) {\n                (<any>data)[hashKey] = hash;\n                list.push({ botData: botData, url: url });\n            }\n        }\n        \n        try {\n            // Build list of write commands\n            var root = this.getStoragePath();\n            if (context.userId) {\n                if (context.persistUserData)\n                {\n                    // Write userData\n                    addWrite('userData', data.userData || {}, root + '/users/' + encodeURIComponent(context.userId));\n                }\n                if (context.conversationId) {\n                    // Write privateConversationData\n                    var url = root + '/conversations/' + encodeURIComponent(context.conversationId) +\n                                     '/users/' + encodeURIComponent(context.userId);\n                    addWrite('privateConversationData', data.privateConversationData || {}, url);\n                }\n            }\n            if (context.persistConversationData && context.conversationId) {\n                // Write conversationData\n                addWrite('conversationData', data.conversationData || {}, root + '/conversations/' + encodeURIComponent(context.conversationId));\n            }\n\n            // Execute writes in parallel\n            async.each(list, (entry, cb) => {\n                var options: request.Options = {\n                    method: 'POST',\n                    url: entry.url,\n                    body: { eTag: '*', data: entry.botData },\n                    json: true\n                };\n                this.authenticatedRequest(options, (err, response, body) => {\n                    cb(err);\n                });\n            }, (err) => {\n                if (callback) {\n                    if (!err) {\n                        callback(null);\n                    } else {\n                        var msg = err.toString();\n                        callback(err instanceof Error ? err : new Error(msg));\n                    }\n                }\n            });\n        } catch (e) {\n            if (callback) {\n                callback(e instanceof Error ? e : new Error(e.toString()));\n            }\n        }\n    }\n\n    private dispatch(body: any, response: (err: Error, response?: any) => void) {\n        if ((<IConversationResult>body).callState == 'terminated') {\n            return response(null);\n        }\n        var event = <IEvent>{};\n        event.agent = consts.agent;\n        event.source = 'skype';\n        event.sourceEvent = body;\n        this.responses[body.id] = response;\n        if (body.hasOwnProperty('participants')) {\n            // Initialize event\n            var convo = <ISkypeConversation>body;\n            event.type = 'conversation';\n            utils.copyFieldsTo(convo, event, 'callState|links|presentedModalityTypes');\n\n            // Populate address\n            var address = event.address = <ICallConnectorAddress>{};\n            address.useAuth = true;\n            address.channelId = event.source;\n            address.correlationId = convo.correlationId;\n            address.serviceUrl = this.settings.serviceUrl || 'https://skype.botframework.com';\n            address.conversation = { id: convo.id, isGroup: convo.isMultiparty };\n            utils.copyFieldsTo(convo, address, 'threadId|subject');\n            if (address.subject) {\n                address.conversation.name = address.subject;\n            }\n            address.participants = [];\n            convo.participants.forEach((p) => {\n                var identity = <IIdentity>{\n                    id: p.identity,\n                    name: p.displayName,\n                    locale: p.languageId,\n                    originator: p.originator\n                };\n                address.participants.push(identity);\n                if (identity.originator) {\n                    address.user = identity;\n                } else if (identity.id.indexOf('28:') == 0) {\n                    address.bot = identity;\n                }\n            });\n        } else {\n            // Initialize event\n            var result = <ISkypeConversationResult>body;\n            event.type = 'conversationResult';\n            event.address = <ICallConnectorAddress>JSON.parse(result.appState);\n            utils.copyFieldsTo(result, event, 'links|operationOutcome|recordedAudio');\n            if (result.id !== event.address.conversation.id) {\n                console.warn(\"CallConnector received a 'conversationResult' with an invalid conversation id.\");\n            }\n        }\n        this.handler(event, (err) => {\n            if (err && this.responses.hasOwnProperty(body.id)) {\n                delete this.responses[body.id];\n                response(err);\n            }\n        });\n    }\n\n    private authenticatedRequest(options: request.Options, callback: (error: any, response: http.IncomingMessage, body: any) => void, refresh = false): void {\n        if (refresh) {\n            this.accessToken = null;\n        }\n        this.addAccessToken(options, (err) => {\n            if (!err) {\n                request(options, (err, response, body) => {\n                    if (!err) {\n                        switch (response.statusCode) {\n                            case 401:\n                            case 403:\n                                if (!refresh) {\n                                    this.authenticatedRequest(options, callback, true);\n                                } else {\n                                    callback(null, response, body);\n                                }\n                                break;\n                            default:\n                                if (response.statusCode < 400) {\n                                    callback(null, response, body);\n                                } else {\n                                    var txt = \"Request to '\" + options.url + \"' failed: [\" + response.statusCode + \"] \" + response.statusMessage;\n                                    callback(new Error(txt), response, null);\n                                }\n                                break;\n                        }\n                    } else {\n                        callback(err, null, null);\n                    }\n                });\n            } else {\n                callback(err, null, null);\n            }\n        });\n    }\n\n    public getAccessToken(cb: (err: Error, accessToken: string) => void): void {\n        if (!this.accessToken || new Date().getTime() >= this.accessTokenExpires) {\n            // Refresh access token\n            var opt: request.Options = {\n                method: 'POST',\n                url: this.settings.endpoint.refreshEndpoint,\n                form: {\n                    grant_type: 'client_credentials',\n                    client_id: this.settings.appId,\n                    client_secret: this.settings.appPassword,\n                    scope: this.settings.endpoint.refreshScope\n                }\n            };\n            request(opt, (err, response, body) => {\n                if (!err) {\n                    if (body && response.statusCode < 300) {\n                        // Subtract 5 minutes from expires_in so they'll we'll get a\n                        // new token before it expires.\n                        var oauthResponse = JSON.parse(body);\n                        this.accessToken = oauthResponse.access_token;\n                        this.accessTokenExpires = new Date().getTime() + ((oauthResponse.expires_in - 300) * 1000); \n                        cb(null, this.accessToken);\n                    } else {\n                        cb(new Error('Refresh access token failed with status code: ' + response.statusCode), null);\n                    }\n                } else {\n                    cb(err, null);\n                }\n            });\n        } else {\n            cb(null, this.accessToken);\n        }\n    }\n\n    private addAccessToken(options: request.Options, cb: (err: Error) => void): void {\n        if (this.settings.appId && this.settings.appPassword) {\n            this.getAccessToken((err, token) => {\n                if (!err && token) {\n                    options.headers = {\n                        'Authorization': 'Bearer ' + token\n                    };\n                    cb(null);\n                } else {\n                    cb(err);\n                }\n            });\n        } else {\n            cb(null);\n        }\n    }\n\n    private getStoragePath(): string {\n        return url.resolve(this.settings.endpoint.stateEndpoint, '/v3/botstate/skype/');\n    }\n\n    private parseBody(req: IWebRequest, cb: (err: Error, body: any) => void): void {\n        if (typeof req.body === 'undefined') {\n            var data = '';\n            req.on('data', (chunk: string) => data += chunk);\n            req.on('end', () => {\n                var err: Error;\n                var body: any;\n                try {\n                    body = JSON.parse(data);\n                } catch (e) {\n                    err = e;\n                }\n                cb(err, body);\n            });\n        } else {\n            cb(null, req.body);\n        }\n    }\n\n    private parseFormData(req: IWebRequest, cb: (err: Error, body: any) => void): void {\n        var busboy = new Busboy({ headers: req.headers, defCharset: 'binary' });\n\n        var result: IConversationResult;\n        var recordedAudio: Buffer;\n        busboy.on('field', (fieldname: string, val: any, fieldnameTruncated: string, valTruncated: any, encoding: string, mimetype: string) => {\n            if (fieldname === 'recordedAudio') {\n                recordedAudio = new Buffer(val, 'binary');\n            } else if (fieldname === 'conversationResult') {\n                result = JSON.parse(val);\n            }\n        });\n        busboy.on('finish', () => {\n            if (result && recordedAudio) {\n                result.recordedAudio = recordedAudio;\n            }\n            cb(null, result);\n        });\n        req.pipe(busboy);\n    }\n\n    private responseCallback(req: IWebRequest, res: IWebResponse) {\n        return function(err: Error, response?: any) {\n            if (err) {\n                res.status(500);\n                res.end();\n            } else {\n                res.status(200);\n                res.send(response);\n            }\n        };\n    }\n}\n\ninterface ICallConnectorStorageData extends bs.IBotStorageData {\n    userDataHash?: string;\n    conversationDataHash?: string;\n    privateConversationDataHash?: string;\n}\n\ninterface ICallConnectorState {\n    eTag: string;\n    data?: any;\n}\n\n/** Express or Restify Request object. */\ninterface IWebRequest {\n    body: any;\n    headers: {\n        [name: string]: string;\n    };\n    on(event: string, ...args: any[]): void;\n    pipe(stream: any): void;\n    is(contentType: string): boolean;\n}\n\n/** Express or Restify Response object. */\ninterface IWebResponse {\n    end(): this;\n    send(status: number, body?: any): this;\n    send(body: any): this;\n    status(code: number): this;\n}\n\n/** Express or Restify Middleware Function. */\ninterface IWebMiddleware {\n    (req: IWebRequest, res: IWebResponse, next?: Function): void;\n}\n\ninterface ISkypeConversation {\n    id: string;\n    callState: string;\n    appId?: string;\n    links?: any;\n    presentedModalityTypes: string[];\n    participants: ISkypeParticipant[];\n    threadId?: string;\n    subject?: string;\n    correlationId?: string;\n    isMultiparty?: boolean;\n}\n\ninterface ISkypeParticipant {\n    identity: string;\n    displayName: string;\n    languageId: string;\n    originator: boolean;\n}\n\ninterface ISkypeConversationResult {\n    id: string;\n    appId?: string;\n    appState?: any;\n    links?: any;\n    operationOutcome: IActionOutcome; \n    recordedAudio?: Buffer;\n}\n\ninterface IOpenIdConfig {\n  issuer: string;\n  authorization_endpoint: string;\n  jwks_uri: string;\n  id_token_signing_alg_values_supported: string[];\n  token_endpoint_auth_methods_supported: string[];\n}\n\ninterface IKey {\n      kty: string;\n      use: string;\n      kid: string;\n      x5t: string;\n      n: string;\n      e: string;\n      x5c: string[];\n}\n"]}